#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const Sequelize = require('sequelize');
const Umzug = require('umzug');
const app = require('../app');
const config = require('../db/config.json').development;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const normalisedPort = parseInt(val, 10);

  if (Number.isNaN(normalisedPort)) {
    // named pipe
    return val;
  }

  if (normalisedPort >= 0) {
    // port number
    return normalisedPort;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;

  const sequelize = new Sequelize(`postgres://${config.username}:${config.password}@${config.host}:${config.port}/template1`);
  sequelize.query('SELECT datname FROM pg_database')
    .then(async (result) => {
      const allDatabases = result[0].map((item) => item.datname);
      if (!allDatabases.includes(config.database)) {
        await sequelize.query(`CREATE DATABASE ${config.database}`)
          .then(() => {
            console.log('db was created');
          })
          .catch((err) => {
            console.log(err);
          });
      }
    })
    .then(() => {
      const db = require('../db/models');
      const umzug = new Umzug({
        migrations:
          {
            path: 'db/migrations',
            params: [
              db.sequelize.getQueryInterface(),
              Sequelize,
            ],
          },
        storage: 'sequelize',
        storageOptions: {
          sequelize: db.sequelize,
        },
      });
      (async () => {
        await umzug.up();
      })();
    });

  console.log(`Listening on ${bind}`);
}
